# scores에서 grade가 1이고 gender=='F'인 데이터 추출
# Total과 Avg 파생
# Math, English, Science, Marketing, Writing 제외
# 나머지 컬럼만 선택
# scores.refind 변수에 할당
# 방법1. 순차실행
temp.filtered <- filter(scores, gender=="F"&grade==1)
temp.filtered
temp.mutated < -mutate(temp.filtered, Total=Math+English+Science+Marketing+Writing,
Avg=(Math+English+Science+Marketing+Writing)/5)
temp.mutated <- mutate(temp.filtered, Total=Math+English+Science+Marketing+Writing,
Avg=(Math+English+Science+Marketing+Writing)/5)
scores.refined <- select(temp.mutated, -c(Math:Writing))
scores.refined
# 방법2. 함수의 중첩
rm(scores.refined)
scores.refined <- select(mutate(filter(scores, grade==1&gender=='F')))
scores.refined
scores.refined <- select(
mutate(
mutate(
filter(scores, grade==1&gender=='F'),
Total=Math+English+Science+Marketing+Writing),
Avg = Total /5),
-c(Math:Writing))
scores.refined
# 방법3. Chain Operator %>% : 앞에서 실행된 결과를 뒤쪽 함수의 입력으로 즉시 사용, 가독성이 높은 코드작성 가능
rm(scores.refined)
scores.refined <- scores %>% filter(grade==1 & gender=='F') %>%
mutate(Total=Math+English+Science+Marketing+Writing) %>%
mutate(Avg=Total/5) %>%
select(-c(Math:Writing))
scores.refined
# mutate 함수 내에서 조건별로 다른 값을 세팅(ifelse를 이용한 파생 변수 추가)
scores.report <- scores.refined %>% mutate(
Result=ifelse(Avg>=90, "A", ifelse(Avg>=80, "B", ifelse(Avg>=70,"C", ifelse(Avg>=60, "D", "F")))))
scores.report
scores.report[,c("Avg", "Result")]
str(scores.report)
# scores.report$Result를 순서형 변수로 변경
scores.report$Result <- ordered(scores.report$Result, levels=rev(c("A", "B", "C", "D", "F")))
str(scores.report)
str(scores.report)
# scores.report 에서 여학생 중 c이상의 성적을 받은 학생을 높은 성적순(Avg의 역순)으로 출력
scores.report %>% arrange(desc(Avg))
# summarise와 group
# scores 수학의 평균
summarise(scores, mean(Math))
# 여러 통계치의 출력
summarise(scores, mean.math=mean(Math), mean.english=mean(English), mean.science=mean(Science))
# group_by : 데이터 셋을 특정 그룹으로 묶음
# scores 데이터 셋을 학년별로 1차 그루핑한 후 class로 2차 그룹핑
scores.group <- scores %>% group_by(grade, class)
scores.group
#
#
# scores.group 과목별(Math, English, Writing) 평균 요약
scores.group %>% summarise(mean.math=mean(Math), mean.english=mean(English), mean.writing=mean(Writing))
# 반별 총점 평균 구하기
scores %>% group_by(grade, class) %>% mutate(Total=Math+English+Science+Marketing+Writing) %>%
summarise(sum_tot=sum(Total), mean_tot=mean(Total)) %>% arrange(desc(mean_tot)) %>% head(10)
# data를 불러오기
data("mtcars")
?mtcars
# 데이터의 앞부분 확인
head(mtcars) # 기본 6개 행
str(seoul.cctv.filtered) # CCTV 수 컬럼이 숫자가 아님 -> 숫자로 변경
# 정제
colnames(seoul.cctv.filtered)
colnames(seoul.cctv.filtered) <- c("자치구", "CCTV 수")
str(seoul.cctv.filtered)
seoul.merged
# 파생변수
seoul.merged$PERCCTV <- seoul.merged[6]/seoul.merged[3]
seoul.merged
# 조건에 여러 개의 값을 비교하고자 할 때 : %in%(dplyr연산자)
# grade가 3이고 등급이 A이거나 E인 학생들
filter(scores, grade==3 & class%in% c("A", "E"))
# select : 데이터셋으로부터 특정변수를 추출
# scores로부터 Math, English, Writing 점수만 추출
select(scores, Math, English, Writing)
# scores로주터 Stu_ID, grade, class를 제외한 나머지 컬럼 -> 제외 : -
select(scores, -Stu_ID, -grade, -class)
# 특정 범위의 컬럼만 추출 -> :
select(scores, Math:Writing)
# mutate : 파생 변수 생성
# scores 데이터 셋이서 Math ~ Writing 점수를 합산 -> total변수 파생, -> avg변수 파생
mutate(scores, Total=Math+English+Science+Marketing+Writing, Avg=(Math+English+Science+Marketing+Writing)/5)
# 반별 총점 평균 구하기
scores %>% group_by(grade, class) %>% mutate(Total=Math+English+Science+Marketing+Writing) %>%
summarise(sum_tot=sum(Total), mean_tot=mean(Total)) %>% arrange(desc(mean_tot)) %>% head(10)
# scores.group 과목별(Math, English, Writing) 평균 요약
scores.group %>% summarise(mean.math=mean(Math), mean.english=mean(English), mean.writing=mean(Writing))
# group_by : 데이터 셋을 특정 그룹으로 묶음
# scores 데이터 셋을 학년별로 1차 그루핑한 후 class로 2차 그룹핑
scores.group <- scores %>% group_by(grade, class)
scores.group
# 반별 총점 평균 구하기
scores %>% scores.group %>% mutate(Total=Math+English+Science+Marketing+Writing) %>%
summarise(sum_tot=sum(Total), mean_tot=mean(Total)) %>% arrange(desc(mean_tot)) %>% head(10)
# scores.group 과목별(Math, English, Writing) 평균 요약
scores.group %>% summarise(mean.math=mean(Math), mean.english=mean(English), mean.writing=mean(Writing))
# 반별 총점 평균 구하기
scores %>% group_by(grade, class) %>% mutate(Total=Math+English+Science+Marketing+Writing) %>%
summarise(sum_tot=sum(Total), mean_tot=mean(Total)) %>% arrange(desc(mean_tot)) %>% head(10)
# 여러 통계치의 출력
summarise(scores, mean.math=mean(Math), mean.english=mean(English), mean.science=mean(Science))
# summarise와 group
# scores 수학의 평균
summarise(scores, mean(Math))
summary(scores, mean(Math))
# summarise와 group
# scores 수학의 평균
summarise(scores, mean(Math))
# 결측치 : 입력되지않은(측정되지 않은) 데이터
# 이상치 : 극단적으로 크거나 작은 데이터
# 통계를 외곡할 수 있으므로 적절히 처리 후 데이터 분석을 해야함
library(ggplot2)
# 데이터셋 확인
?mpg
# 이상치 확인을 위한 boxplot
boxplot(mpg$cty, mpg$hwy)
# 시내주행연비(cty)이상치 확인을 위한 boxplot 후 bp 객체에 할당
bp <-boxplot(mpg$cty)
# 내부데이터 확인
bp$stat
# 내부데이터 확인
bp$stats
str(mpg)
# 정제
library(dplyr)
mileage <- mpg %>% select("model", "cty", "hwy")
mileage
# 극단치 뽑아내기
outlier <- mileage %>% filter(cty>9|cty>26)
outlier
outlier
# 극단치 뽑아내기
outlier <- mileage %>% filter(cty<9|cty>26)
outlier
# cty 연비의 통계
mean(mileage$cty)
# 이상치를 결측치로 대체
mileage$cty <- ifelse(mileage$cty<9|mileage$cty>26, NA, mileage$cty)
mileage$cty
# cty연비 통계(이상치를 결측치로 바꾼 후 포함)
mean(mileage$cty)
# cty연비 통계(이상치를 결측치로 바꾼 후 포함)
mean(mileage$cty, na.rm=T)
# 결측치가 많은 경우에도 통계를 왜곡할 수있음 -> NA를 다른 데이터의 통계 대푯값으로 대체하는 것이 가장 이상적
# 결측 빈도수 체크
is.na(mileage$cty)
table(is.na(mileage$cty))
# 결측치를 중앙값으로 대체
med <- medain(mileage$cty, na.rm=T)
# 결측치를 중앙값으로 대체
med <- median(mileage$cty, na.rm=T)
med
mileage$cty <- ifelse(is.na(mileage$cty), med, mileage$cty)
mean(mileage$cty)
# Graph 함수
# 산점도 차트 : 두 변수간의 관계를 파악하기 위한 그래프
mtcars
# Graph 함수
# 산점도 차트 : 두 변수간의 관계를 파악하기 위한 그래프
?mtcars
str(mtcars)
# wt(중량)과 mpg(연비)를 Scatter Plot으로 표현
plot(mtcars$wt, mtcars$mpg)
cor(mtcars$wt, mtcars$mpg)
# 꾸미기
plot(x=mtcars$wt, y=mtcars$mpg)
# 꾸미기
plot(x=mtcars$wt, y=mtcars$mpg,
xlab="차량중량", ylab="연비"
mian="중량 vs 연비")
# 꾸미기
plot(x=mtcars$wt, y=mtcars$mpg,
xlab="차량중량", ylab="연비",
mian="중량 vs 연비")
# 꾸미기
plot(x=mtcars$wt, y=mtcars$mpg,
xlab="차량중량", ylab="연비",
mian="중량 vs 연비",
col="Red")
# 꾸미기
plot(x=mtcars$wt, y=mtcars$mpg,
xlab="차량중량", ylab="연비",
main="중량 vs 연비",
col="Red")
# 산점도 매트릭스 : 지정한 변수간 상관관계를 한눈에 보여주는 그래프
?pairs
?mtcars
paris(data=mtcars, ~wt+mpg+hp+cyl, main="ScatterPlot Matrix")
pairs(data=mtcars, ~wt+mpg+hp+cyl, main="ScatterPlot Matrix")
# 파이차트 : 전체 중에 해당 데이터가 차지하는 비율을 표시
scores <- data.frame(grade=c("A", "B", "C", "D"), cnt(3, 12, 11, 2))
# 파이차트 : 전체 중에 해당 데이터가 차지하는 비율을 표시
scores <- data.frame(grade=c("A", "B", "C", "D"), cnt=c(3, 12, 11, 2))
scores
str(scores)
pie(scores$cmt)
pie(scores$cnt
pie(scores$cnt)
pie(scores$cnt)
pie(scores$cnt, labels=scores$grade)
pie(scores$cnt, labels=scores$grade, radius=1)
pie(scores$cnt, labels=scores$grade, radius=1, col=c("red", "blue", "yellow", "green"))
pie(scores$cnt, labels=scores$grade, radius=1,
#col=c("red", "blue", "yellow", "green")
col=rainbow(4))
pie(scores$cnt, labels=scores$grade, radius=1,
#col=c("red", "blue", "yellow", "green")
col=rainbow(4)) # 색 자동 지정
pie(scores$cnt, labels=scores$grade, radius=1,
#col=c("red", "blue", "yellow", "green")
col=rainbow(4),# 색 자동 지정
main="2019년 성적")
# Legend (범례) : label 대신 퍼센트 정보로 출력
scores$percent <- round((scores$cnt/sum(scores$cmt))*100, 1) # 소숫점 1자리까지 퍼센트율 구하기
scores$percent
# Legend (범례) : label 대신 퍼센트 정보로 출력
scores$percent <- round(scores$cnt/sum(scores$cmt)*100, 1) # 소숫점 1자리까지 퍼센트율 구하기
scores$percent
# Legend (범례) : label 대신 퍼센트 정보로 출력
scores$percent <- round(scores$cnt / sum(scores$cnt)*100, 1) # 소숫점 1자리까지 퍼센트율 구하기
scores$percent
sum(scores$percent) # 합산된 값이 100
pie(scores$cnt, labels=scores$percent, col=rainbow(length(scores$cnt)))
pie(scores$cnt, labels=scores$percent, col=rainbow(length(scores$cnt)), main="2019년 성적")
legend("topright", legend=scores$grade, fill=raindow(length(scores$cnt)))
legend("topright", legend=scores$grade, fill=rainbow(length(scores$cnt)))
# 바차트 : 항목간의 값을 비교
# 데이터 새엉
rev <- sample(1:20, 6, rep=T)
rev
barplot(rev)
name <- c("MAR", "APR", "MAY", "JUN", "JUL", "AUG")
barplot(rev, names.arg=names)
barplot(rev, names.arg=names)
barplot(rev, names.arg=names, xlab="Month", ylab="Revenue", main="Revenue Chart", col="blue", border="red")
rev
barplot(rev)
names <- c("MAR", "APR", "MAY", "JUN", "JUL", "AUG")
barplot(rev, names.arg=names, xlab="Month", ylab="Revenue", main="Revenue Chart", col="blue", border="red")
rm(name)
barplot(rev, names.arg=names, xlab="Month", ylab="Revenue", main="Revenue Chart", col="pink", border="red")
barplot(rev, names.arg=names, xlab="Month", ylab="Revenue", main="Revenue Chart", col="pink", border="purple")
# Stacked Bar Chart
rev2 <- sample(1:20, 18, rep=T)
rev2
# 3행 6열의 Matrix
rev2 <- matrix(rev2, nrow=3)
rev2
barplot(rev2, )
barplot(rev2, names.arg=names)
barplot(rev2, names.arg=names, xlab="Month", ylab="Revenue", main="Revenue Chart", col=c("pink", "purple", "red"))
barplot(rev2, names.arg=names, xlab="Month", ylab="Revenue", main="Revenue Chart", col=c("pink", "purple", "lightBlue"))
barplot(rev2, names.arg=names, xlab="Month", ylab="Revenue", main="Revenue Chart", col=c("pink", "purple", "lightred"))
barplot(rev2, names.arg=names, xlab="Month", ylab="Revenue", main="Revenue Chart", col=c("pink", "purple", "lightpurple"))
barplot(rev2, names.arg=names, xlab="Month", ylab="Revenue", main="Revenue Chart", col=c("pink", "purple", "lightblue"))
barplot(rev2, names.arg=names, xlab="Month", ylab="Revenue", main="Revenue Chart", col=c("pink", "lightgreen", "lightblue"))
# 범례 표시
legend("topright", c("A", "B", "c"))
# 범례 표시
legend("topright", c("A", "B", "C"), fill=col=c("pink", "lightgreen", "lightblue"))
# 범례 표시
legend("topright", c("A", "B", "C"), fill=c("pink", "lightgreen", "lightblue"))
# Box Plot : 데이터의 전체적인 분포를 확인
# mtcars의 mpg와 cyl 데이터의 분포를 확인
bp.input <- mtcars[, c("mpg", "cyl")]
bp.input
boxplot(mpg ~cyl, data=dp.input)
boxplot(mpg ~cyl, data=bp.input)
boxplot(mpg ~cyl, data=bp.input, xlab="Cylinder", ylab="MPG")
boxplot(mpg ~cyl, data=bp.input, xlab="Cylinder", ylab="MPG", col=c("lightgreen", "pink", "lightblue"), names=c("Low", "Medium", "High"))
# 히스토그램 : 구간별 관측 획수(비율)을 그래프로 확인
wstudents
# 히스토그램 : 구간별 관측 획수(비율)을 그래프로 확인
wstudents$height
# histogram
hist(wstudnets$height)
# histogram
hist(wstudents$height)
# histogram
hist(wstudents$height, main="Height of wstudents", xlab="Height", col="pink", border="black")
# histogram
hist(wstudents$height, main="Height of wstudents", xlab="Height", col="pink", border="gray")
# freq=FALSE 로 주면 밀도 그래프로 변경
hist(wstudents$height, freq=FALSE, main="Height of wstudents", xlab="Height", col="pink", border="gray")
# freq=FALSE 로 주면 밀도 그래프로 변경
hist(wstudents$height, freq=FALSE, main="Height of wstudents(Density)", xlab="Height", col="pink", border="gray")
# freq=FALSE 로 주면 밀도 그래프로 변경
hist(wstudents$height, freq=FALSE, main="Height of wstudents(Density)", xlab="Height", col="black", border="gray")
# histogram -> 빈도 그래프
hist(wstudents$height, main="Height of wstudents", xlab="Height", col="pink", border="gray")
# freq=FALSE 로 주면 밀도 그래프로 변경
hist(wstudents$height, freq=FALSE, main="Height of wstudents(Density)", xlab="Height", col="black", border="gray")
# histogram -> 빈도 그래프
stat <- hist(wstudents$height, main="Height of wstudents", xlab="Height", col="pink", border="gray")
# freq=FALSE 로 주면 밀도 그래프로 변경 -> 합산된 값이 1
stat <- hist(wstudents$height, freq=FALSE, main="Height of wstudents(Density)", xlab="Height", col="black", border="gray")
# R의 그래프 함수들은 단순히 그래프를 그리는 것이 아니라 해당 그래프를 만들때 필요했던 통계치들을 함께 데이터로 가지고 있다 -> 활용 가능
stat
is(stat)
# R의 그래프 함수들은 단순히 그래프를 그리는 것이 아니라 해당 그래프를 만들때 필요했던 통계치들을 함께 데이터로 가지고 있다 -> 활용 가능
stat # 그래프에 사용된 통계치들 확인 가능
is.list(stat)
# histogram의 구간 경계 값
stat$breaks
# 각 구간별 데이터의 개수(빈도)
stat$counts
# 각 구간별 데이터의 밀도
stat$density
sum(stat$density)
sum(stat$density * 5)
sum(stat$density * 5) == 1
sum(stat$density * 5) == 1 # 구간의 데이터 밀도의 합은 1 (5개의 구간)
# Line 그래프 : 주로 데이터의 시간흐름에 따라 추세 혹은 트렌드 변화를 표시해주는 그래프
v <- sample(10:20, 5, req=5)
# Line 그래프 : 주로 데이터의 시간흐름에 따라 추세 혹은 트렌드 변화를 표시해주는 그래프
v <- sample(10:20, 5, rep=5)
plot(v, type="p")
# Line 그래프 : 주로 데이터의 시간흐름에 따라 추세 혹은 트렌드 변화를 표시해주는 그래프
v <- sample(10:20, 5, rep=5)
plot(v, type="p")
# Line 그래프 : 주로 데이터의 시간흐름에 따라 추세 혹은 트렌드 변화를 표시해주는 그래프
v <- sample(10:20, 5, rep=5)
plot(v, type="p")
plot(v, type="l")
plot(v, type="o"
plot(v, type="o")
plot(v, type="o")
plot(v, type="o", main="Line Graph", xlab="HORZ", ylab="VERT", col="pink")
plot(v, type="o", main="Line Graph", xlab="HORZ", ylab="VERT", col="red")
# Line 그래프 : 주로 데이터의 시간흐름에 따라 추세 혹은 트렌드 변화를 표시해주는 그래프
v <- sample(10:20, 5, rep=T)
# Line 그래프 : 주로 데이터의 시간흐름에 따라 추세 혹은 트렌드 변화를 표시해주는 그래프
v <- sample(10:20, 5, rep=T)
plot(v, type="l") # 선그래프
plot(v, type="o") # 점과 선이 함께 있는 그래프
plot(v, type="o", main="Line Graph", xlab="HORZ", ylab="VERT", col="red")
# legend, lins, points 등의 함수는 기존 그래프위에 다른 그래프를 덧그릴 수 있다.
v2 <- sample(10:20, 5, rep=T)
lines(v2, type="o", col="blue")
# legend, lins, points 등의 함수는 기존 그래프위에 다른 그래프를 덧그릴 수 있다.
v2 <- sample(10:20, 5, rep=T)
lines(v2, type="o", col="blue")
# legend, lins, points 등의 함수는 기존 그래프위에 다른 그래프를 덧그릴 수 있다.
v2 <- sample(10:20, 5, rep=T)
lines(v2, type="o", col="blue")
lines(v2, type="o", col="blue")
# Line 그래프 : 주로 데이터의 시간흐름에 따라 추세 혹은 트렌드 변화를 표시해주는 그래프
v <- sample(10:20, 5, rep=T)
plot(v, type="p") # 점그래프
plot(v, type="l") # 선그래프
plot(v, type="o") # 점과 선이 함께 있는 그래프
plot(v, type="o", main="Line Graph", xlab="HORZ", ylab="VERT", col="red")
# legend, lins, points 등의 함수는 기존 그래프위에 다른 그래프를 덧그릴 수 있다.
v2 <- sample(10:20, 5, rep=T)
lines(v2, type="o", col="blue")
# ggplot2 : 시각화를 위한 그래픽 라이브러리
# mpg 데이터셋으로 그래프만드는 연습하기
library(ggplot2)
# ggplot2 : 시각화를 위한 그래픽 라이브러리
# mpg 데이터셋으로 그래프만드는 연습하기
library(ggplot2)
?mpg
# cyl(실린더 수), hwy(고속도로 연비)의 그래프
plt <- ggplot(data=mpg)
plt
# 레이어를 얹을 때는 + 사인으로 연결
plt+geom_point(aes(x=cyl, y=hwy))
# 레이어를 얹을 때는 + 사인으로 연결
plt+geom_point(aes(x=displ, y=hwy))
# 레이어를 얹을 때는 + 사인으로 연결
plt+geom_point(aes(x=displ, y=hwy)+xlab("배기랑"+ylab("고속도로연비")
# 레이어를 얹을 때는 + 사인으로 연결
plt+geom_point(aes(x=displ, y=hwy)+xlab("배기랑"+ylab("고속도로연비")
# 레이어를 얹을 때는 + 사인으로 연결
plt+geom_point(aes(x=displ, y=hwy)+xlab("배기랑")+ylab("고속도로연비")
# 레이어를 얹을 때는 + 사인으로 연결
plt+geom_point(aes(x=displ, y=hwy)+xlab("배기랑")+ylab("고속도로연비")
# 레이어를 얹을 때는 + 사인으로 연결
plt+geom_point(aes(x=displ, y=hwy)+xlab("배기랑")+ylab("고속도로연비")
# 레이어를 얹을 때는 + 사인으로 연결
plt+geom_point(aes(x=displ, y=hwy)+xlab("배기랑")+ylab("고속도로연비")
# 레이어를 얹을 때는 + 사인으로 연결
plt+geom_point(aes(x=displ, y=hwy)+xlab("배기랑")+ylab("고속도로연비")
seoul.merged
# 레이어를 얹을 때는 + 사인으로 연결
plt+geom_point(aes(x=displ, y=hwy))+xlab("배기랑")+ylab("고속도로연비")
# 자치구별 인구수를 데이터로 시각화 연습
seoul.merged
plt <- ggplot(seoul.merged)
plt <- ggplot(seoul.merged, aes(x=자치구, y=계))
plt <- ggplot(seoul.merged, aes(x=자치구, y=계)/1000)
plt <- ggplot(seoul.merged, aes(x=자치구, y=계/1000))
plt
# 데이터에 bar char 추가
plt + geom_bar(fill=rainbow(nrow(data)))
# 데이터에 bar char 추가
plt + geom_bar(fill=rainbow(nrow(seoul.merged)))
# 데이터에 bar char 추가
plt + geom_bar(fill=rainbow(nrow(seoul.merged))
plt
# 데이터에 bar char 추가
plt + geom_bar(fill=rainbow(nrow(seoul.merged)))
# 데이터에 bar char 추가
plt + geom_bar(stat="identity", fill=rainbow(nrow(seoul.merged)))
plt
# 데이터에 bar char 추가
plt + geom_bar(stat="identity", fill=rainbow(nrow(seoul.merged)))
?geom_bar
+xlab("자치구")+ylab("인구수")
# 데이터에 bar char 추가
plt + geom_bar(stat="identity", fill=rainbow(nrow(seoul.merged)))+ggtitle("서울 자치구별 인구")+xlab("자치구")+ylab("인구수")
# 데이터에 bar char 추가
plt + geom_bar(stat="identity", fill=rainbow(nrow(seoul.merged)))+ggtitle("서울 자치구별 인구")+
xlab("자치구")+ylab("인구수")+theme(axis.text.x=element_text(angle=90))
# 데이터에 bar char 추가
plt + geom_bar(stat="identity", fill=rainbow(nrow(seoul.merged)))+ggtitle("서울 자치구별 인구")+
xlab("자치구")+ylab("인구수")+theme(axis.text.x=element_text(angle=90), axis.title.x=element_text(size=14))
# 데이터에 bar char 추가
plt + geom_bar(stat="identity", fill=rainbow(nrow(seoul.merged)))+ggtitle("서울 자치구별 인구")+
xlab("자치구")+ylab("인구수")+theme(axis.text.x=element_text(angle=90), axis.title.x=element_text(size=9),
axis.title.y=element_text(size=9))
plt
# 데이터에 bar char 추가
plt <- plt + geom_bar(stat="identity", fill=rainbow(nrow(seoul.merged)))+
ggtitle("서울 자치구별 인구")+xlab("자치구")+ylab("인구수")+
theme(axis.text.x=element_text(angle=90), axis.title.x=element_text(size=9),
axis.title.y=element_text(size=9))
plt
# 인터랙티브 그래프로 만들기 :plotly패키지 이용
plt
install.packages("plotly")
library(plotly)
ggplotly(plt)
ggplotly(plt)
# Oracle 데이터베이스 연결 :jdbc 연결을 위한 패키지들
install.packages("rJava")
install.pactage("DBI")
install.packages("RJSBC")
# 라이버러리 로드
libarat(rJava)
# 라이버러리 로드
library(rJava)
library(DBI)
install.packages("RJDBC")
install.pactage("DBI")
install.pactages("DBI")
install.packages("DBI")
# Oracle 데이터베이스 연결 :jdbc 연결을 위한 패키지들
install.packages("rJava")
library(DBI)
library(RJDBC)
# ojdbc 드라이버 경로
driver.path <- "C:/oraclexe/app/oracle/product/11.2.0/server/jdbc/lib/ojdbc6"
driver <- JDBC(driverClass="oracle.jdbc.driver.OracleDriver",
classPath = driver.path)
driver <- JDBC(driverClass="oracle.jdbc.driver.OracleDriver",
classPath=driver.path)
# Oracle 데이터베이스 연결 :jdbc 연결을 위한 패키지들
install.packages("rJava")
# Connection 얻기
conn <- dbConnect(driver, "jdbc:oracle:thin:@localhost:1521/xe")
driver <- JDBC(driverClass="oracle.jdbc.driver.OracleDriver",
classPath=driver.path)
driver <- JDBC(driverClass="oracle.jdbc.driver.OracleDriver", classPath=driver.path)
# ojdbc 드라이버 경로
driver.path <- "C:/oraclexe/app/oracle/product/11.2.0/server/jdbc/lib/ojdbc6"
driver <- JDBC(driverClass="oracle.jdbc.driver.OracleDriver", classPath=driver.path)
?dbConnect
conn
# ojdbc 드라이버 경로
driver.path <- "C:\oraclexe\app\oracle\product\11.2.0\server\jdbc\lib\ojdbc6"
# ojdbc 드라이버 경로
driver.path <- "C:/oraclexe/app/oracle/product/11.2.0/server/jdbc/lib/ojdbc6"
driver <- JDBC(driverClass="oracle.jdbc.driver.OracleDriver", classPath=driver.path)
# employees table 열기
# employees <- dbReadTable(conn, "employees") # ERROR 오라클과 연동 에러
# query 만들기
query <- "SELECT * FROM employees"
rs <- dbGetQuery(conn, query)
str(rs)
# ojdbc 드라이버 경로
driver.path <- "C:/oraclexe/app/oracle/product/11.2.0/server/jdbc/lib/ojdbc6.jar"
driver <- JDBC(driverClass="oracle.jdbc.driver.OracleDriver", classPath=driver.path)
# Connection 얻기
conn <- dbConnect(driver, "jdbc:oracle:thin:@localhost:1521/xe")
# Connection 얻기
conn <- dbConnect(driver, "jdbc:oracle:thin:@localhost:1521/xe")
# Connection 얻기
conn <- dbConnect(driver, "jdbc:oracle:thin:@localhost:1521/xe", "hr")
# Connection 얻기
conn <- dbConnect(driver, "jdbc:oracle:thin:@localhost:1521/xe", "hr", "hr")
?dbConnect
conn
# 테이블 목록 확인
dbListTables(conn)
# employees table 열기
# employees <- dbReadTable(conn, "employees") # ERROR 오라클과 연동 에러
# query 만들기
query <- "SELECT * FROM employees"
rs <- dbGetQuery(conn, query) # 쿼리 실행
rs
str(rs)
# db는 항상 마지막에 닫아주는 것이 좋음, db접속헤제
dbDisconnect(conn)
is(v)
v * 2
